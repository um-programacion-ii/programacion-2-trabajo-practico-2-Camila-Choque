package Class;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.List;
import java.util.Collections;


public class GestorRecursos {
    private ArrayList<RecursoDigital> recursos;
    private Scanner scanner;

    public GestorRecursos() {
        recursos = new ArrayList<>();
        scanner = new Scanner(System.in);
    }

    public void crearRecursoDesdeConsola() {
        System.out.println("üìö ¬øQu√© tipo de recurso desea crear?");
        System.out.println("1. Libro");
        System.out.println("2. Revista");
        System.out.println("3. Audiolibro");
        System.out.print("Ingrese una opci√≥n: ");
        int opcion = scanner.nextInt();
        scanner.nextLine();

        System.out.print("üî§ T√≠tulo: ");
        String titulo = scanner.nextLine();

        System.out.print("üë§ Autor: ");
        String autor = scanner.nextLine();

        System.out.print("üè∑Ô∏è Categor√≠a: ");
        String categoria = scanner.nextLine();


        int id = recursos.size() + 1;
        RecursoDigital nuevo = null;

        switch (opcion) {
            case 1 -> {
                System.out.print("üìÑ Cantidad de p√°ginas: ");
                int paginas = scanner.nextInt();
                nuevo = new Libro(id, titulo, RecursoDigital.TipoEstado.DISPONIBLE, autor, categoria, paginas);
            }
            case 2 -> {
                System.out.print("üìñ N√∫mero de edici√≥n: ");
                int edicion = scanner.nextInt();
                nuevo = new Revista(id, titulo, RecursoDigital.TipoEstado.DISPONIBLE, autor, categoria, edicion);
            }
            case 3 -> {
                System.out.print("üéß Duraci√≥n en minutos: ");
                int duracion = scanner.nextInt();
                nuevo = new AudioLibro(id, titulo, RecursoDigital.TipoEstado.DISPONIBLE, autor, categoria, duracion);
            }
            default -> {
                System.out.println("‚ö†Ô∏è Opci√≥n inv√°lida.");
                return;
            }
        }


        recursos.add(nuevo);
        System.out.println("‚úÖ Recurso creado exitosamente.");
    }

    public void mostrarRecursos() {
        if (recursos.isEmpty()) {
            System.out.println("‚ö†Ô∏è No hay recursos registrados.");
        } else {
            // Ordenar la lista de recursos por t√≠tulo
            Collections.sort(recursos, new ComparadorPorTitulo());

            System.out.println("\nüìö Lista de recursos:");
            for (RecursoDigital r : recursos) {
                System.out.println("-------------------------");
                System.out.println(r);
            }
        }
    }
    //Se aprendio a utilizar map con chatGPT
    public void buscarRecursoPorTitulo(String tituloBuscado) {
        List<RecursoDigital> encontrados = recursos.stream()
                .filter(r -> r.getTitulo().toLowerCase().contains(tituloBuscado.toLowerCase()))
                .toList();

        if (encontrados.isEmpty()) {
            System.out.println("üîç No se encontraron recursos con el t√≠tulo: " + tituloBuscado);
        } else {
            System.out.println("üìÑ Recursos encontrados:");
            for (RecursoDigital r : encontrados) {
                System.out.println("-------------------------");
                System.out.println(r);
            }
        }
    }
    //Se aprendio a utilizar map con chatGPT
    public void buscarPorCategoria(String categoriaBuscada) {
        List<RecursoDigital> encontrados = recursos.stream()
                .filter(r -> r.getCategoria().equalsIgnoreCase(categoriaBuscada))
                .toList();

        if (encontrados.isEmpty()) {
            System.out.println("üîç No se encontraron recursos en la categor√≠a: " + categoriaBuscada);
        } else {
            System.out.println("üìÇ Recursos encontrados en la categor√≠a \"" + categoriaBuscada + "\":");
            for (RecursoDigital r : encontrados) {
                System.out.println("-------------------------");
                System.out.println(r);
            }
        }
    }

    public ArrayList<RecursoDigital> getRecursos() {
        return recursos;
    }
}
